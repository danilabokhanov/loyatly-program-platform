openapi: 3.0.3
info:
  title: Loyalty Program Platform - Promo Code Proxy Service
  description: API gateway proxy for the Promo Code service
  version: 1.0.0
  
servers:
  - url: https://api.loyaltyplatform.com/v1
    description: Production server
  - url: https://staging-api.loyaltyplatform.com/v1
    description: Staging server

paths:
  /promos:
    post:
      summary: Create a new promo code
      description: Creates a new promo code in the system
      operationId: createPromo
      tags:
        - Promos
      security:
        - bearerAuth: []
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromoCreate'
      responses:
        '201':
          description: Promo code created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Promo'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          description: Promo code already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    get:
      summary: Get paginated list of promo codes
      description: Returns a paginated list of promo codes
      operationId: getPromos
      tags:
        - Promos
      security:
        - bearerAuth: []
        - basicAuth: []
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: sort
          in: query
          description: Sort field
          schema:
            type: string
            enum: [creation_date, update_date, title, discount_rate]
            default: creation_date
        - name: order
          in: query
          description: Sort order
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromoPaginated'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /promos/{id}:
    get:
      summary: Get promo code by ID
      description: Returns a single promo code by its ID
      operationId: getPromoById
      tags:
        - Promos
      security:
        - bearerAuth: []
        - basicAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the promo code
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Promo'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    
    put:
      summary: Update promo code
      description: Updates an existing promo code
      operationId: updatePromo
      tags:
        - Promos
      security:
        - bearerAuth: []
        - basicAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the promo code to update
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromoUpdate'
      responses:
        '200':
          description: Promo code updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Promo'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    
    delete:
      summary: Delete promo code
      description: Deletes a promo code by its ID
      operationId: deletePromo
      tags:
        - Promos
      security:
        - bearerAuth: []
        - basicAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the promo code to delete
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Promo code deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  schemas:
    PromoCreate:
      type: object
      required:
        - title
        - promo_code
        - discount_rate
      properties:
        title:
          type: string
          maxLength: 100
          example: "Summer Sale 2023"
        description:
          type: string
          maxLength: 500
          example: "20% discount on all summer items"
        discount_rate:
          type: number
          format: double
          minimum: 0
          maximum: 100
          example: 20.0
        promo_code:
          type: string
          maxLength: 50
          example: "SUMMER20"
    
    PromoUpdate:
      type: object
      properties:
        title:
          type: string
          maxLength: 100
          example: "Summer Sale 2023 Extended"
        description:
          type: string
          maxLength: 500
          example: "20% discount on all summer items - extended"
        discount_rate:
          type: number
          format: double
          minimum: 0
          maximum: 100
          example: 25.0
        promo_code:
          type: string
          maxLength: 50
          example: "SUMMER25"
    
    Promo:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        title:
          type: string
          example: "Summer Sale 2023"
        description:
          type: string
          example: "20% discount on all summer items"
        author_id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174001"
        discount_rate:
          type: number
          format: double
          example: 20.0
        promo_code:
          type: string
          example: "SUMMER20"
        creation_date:
          type: string
          format: date-time
          example: "2023-06-01T10:00:00Z"
        update_date:
          type: string
          format: date-time
          example: "2023-06-10T15:30:00Z"
    
    PromoPaginated:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Promo'
        total:
          type: integer
          example: 100
        page:
          type: integer
          example: 1
        size:
          type: integer
          example: 20
        pages:
          type: integer
          example: 5
    
    Error:
      type: object
      properties:
        code:
          type: string
          example: "PROMO_CODE_EXISTS"
        message:
          type: string
          example: "Promo code already exists"
        details:
          type: object
          additionalProperties: true
  
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
        description: Unauthorized or authentication failed
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token-based authentication
    
    basicAuth:
      type: http
      scheme: basic
      description: Basic authentication with username and password
